import Window;
var win = Window;

var WIDTH = 800;
var HEIGHT = 600;
win.init(WIDTH, HEIGHT, "Raycasting Demo");

var MAP = [
    "###########",
    "#...... ###",
    "#..###.  ##",
    "#..#.#.   #",
    "#..#.#.   #",
    "#.. ...   #",
    "###########"
];
var TILE_SIZE = 64;
var MAP_WIDTH = MAP[0].length();
var MAP_HEIGHT = MAP.length();

var player_x = TILE_SIZE * 1.5;
var player_y = TILE_SIZE * 1.5;
var player_angle = 0;
var FOV = Math.PI / 3;
var NUM_RAYS = WIDTH;
var MAX_DEPTH = 800;
var DELTA_ANGLE = FOV / NUM_RAYS;
var DIST = (WIDTH / 2) / Math.tan(FOV / 2);
var SCALE = 1;
var SPEED = 2;
var ROT_SPEED = 0.03;

var BLACK = 0;
var DARK_GRAY = 2630720;
var GRAY = 6579300;

func min(a, b){
    if(a > b) return b;
    return a;
}

func calc(ray, start_angle){
    var angle = start_angle + ray * DELTA_ANGLE;
    var sin_a = Math.sin(angle);
    var cos_a = Math.cos(angle);

    for (var depth = 1; depth < 800; depth = depth + 1) {
        var target_x = player_x + depth * cos_a;
        var target_y = player_y + depth * sin_a;
        var map_x = target_x \ TILE_SIZE;
        var map_y = target_y \ TILE_SIZE;

        if (0 <= map_x and map_x < MAP_WIDTH and 0 <= map_y and map_y < MAP_HEIGHT) {
            if (MAP[map_y].charAt(map_x) == "#") {
                var corrected_depth = depth * Math.cos(angle - player_angle);
                var wall_height = Math.min(HEIGHT, (TILE_SIZE * DIST) / (corrected_depth + 0.0001));
                var s = 255 \ (1 + corrected_depth * corrected_depth * 0.0001);
                var color = s * 65536 + s * 256 + s;

                win.drawRect(ray * SCALE, HEIGHT \ 2 - wall_height \ 2, SCALE, wall_height, color);
                break;
            }
        }
    }
}

func cast_rays() {
    var start_angle = player_angle - FOV / 2;

    for (var ray = 0; ray < NUM_RAYS; ray = ray + 1) {
        calc(ray, start_angle);
    }
}


var forward = false;
var backward = false;
var leftward = false;
var rightward = false;
var left = false;
var right = false;

while (true) {

    var event = win.pollEvent();
    if (event != nil) {
        if (event[0] == "quit") {
            win.exit();
            break;
        }

        if (event[0] == "key_down") {
            if (event[1] == "Left") left = true;
            if (event[1] == "Right") right = true;
            if (event[1] == "W") forward = true;
            if (event[1] == "S") backward = true;
            if (event[1] == "A") leftward = true;
            if (event[1] == "D") rightward = true;
        }

        if (event[0] == "key_up") {
            if (event[1] == "Left") left = false;
            if (event[1] == "Right") right = false;
            if (event[1] == "W") forward = false;
            if (event[1] == "S") backward = false;
            if (event[1] == "A") leftward = false;
            if (event[1] == "D") rightward = false;
        }
    }


    if(left) player_angle = player_angle - ROT_SPEED;
    if(right) player_angle = player_angle + ROT_SPEED;

    if (forward) {
        var dx = Math.cos(player_angle) * SPEED;
        var dy = Math.sin(player_angle) * SPEED;

        var nx = player_x + dx;
        var ny = player_y + dy;
        if (MAP[ny \ TILE_SIZE].charAt(nx \ TILE_SIZE) != "#") {
            player_x = nx;
            player_y = ny;
        }
    }

    if (backward) {
        var dx = Math.cos(player_angle) * SPEED;
        var dy = Math.sin(player_angle) * SPEED;

        var nx = player_x - dx;
        var ny = player_y - dy;
        if (MAP[ny \ TILE_SIZE].charAt(nx \ TILE_SIZE) != "#") {
            player_x = nx;
            player_y = ny;
        }
    }

    if (leftward) {
        var dx = Math.cos(player_angle + Math.PI / 2) * SPEED;
        var dy = Math.sin(player_angle + Math.PI /2) * SPEED;

        var nx = player_x - dx;
        var ny = player_y - dy;
        if (MAP[ny \ TILE_SIZE].charAt(nx \ TILE_SIZE) != "#") {
            player_x = nx;
            player_y = ny;
        }
    }

    if (rightward) {
        var dx = Math.cos(player_angle - Math.PI/2) * SPEED;
        var dy = Math.sin(player_angle - Math.PI/2) * SPEED;

        var nx = player_x - dx;
        var ny = player_y - dy;
        if (MAP[ny \ TILE_SIZE].charAt(nx \ TILE_SIZE) != "#") {
            player_x = nx;
            player_y = ny;
        }
    }

    win.clear(DARK_GRAY);
    win.drawRect(0, 0, WIDTH, HEIGHT \ 2, GRAY);
    win.drawRect(0, HEIGHT \ 2, WIDTH, HEIGHT \ 2, BLACK);
    cast_rays();
    win.update();
}
